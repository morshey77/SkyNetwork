<?php

namespace vezdehod\packs;

use JsonException;
use pocketmine\plugin\Plugin;
use pocketmine\plugin\PluginBase;
use ReflectionClass;
use vezdehod\packs\pack\ResourcePackGenerator;
use vezdehod\packs\resource\ResourceManager;
use vezdehod\packs\ui\UIManager;
use vezdehod\packs\utils\JsonSerializer;
use function is_dir;
use function ksort;
use function str_ends_with;
use function strtolower;

class VPacksMain extends PluginBase {

    private UIManager $uiManager;
    private ResourceManager $resourceManager;

    protected function onLoad(): void {
        JsonSerializer::$production = str_ends_with($this->getFile(), '.phar') && !is_dir($this->getFile());

        $this->uiManager = new UIManager();
        $this->resourceManager = new ResourceManager();

        ContentFactory::setFactory(fn(Plugin $plugin) => new PluginContent(
            $plugin,
            $this->uiManager->fromPlugin($plugin),
            $this->resourceManager->fromPlugin($plugin),
        ));
    }

	/**
	 * Function getPackVersion
	 * @return array<int, int, int>
	 */
	public function getPackVersion(): array{
		return $this->getConfig()->get('pack-version', [0,0,0]);
	}

	/**
	 * Function updatePackVersion
	 * @return array<int, int, int>
	 * @throws JsonException
	 */
	public function updatePackVersion(): array{
		$currentVersionArray = $this->getConfig()->get('pack-version', [0,0,0]);
		$currentVersionArray[2]++;
		$this->getConfig()->set('pack-version', $currentVersionArray);
		$this->getConfig()->save();
		return $currentVersionArray;
	}

    protected function onEnable(): void {
        $contents = ContentFactory::getAndLock();

        //This is need to be sorted, because of PMMP random plugin loading to avoid alphabetical order depending
        //https://github.com/pmmp/PocketMine-MP/blob/2b61c025c26394c3293bcc12a2d0b2301cb4c7ee/src/plugin/PluginManager.php#L237
        ksort($contents);

        $generator = new ResourcePackGenerator($this->getDataFolder() . 'autogenerated.zip', $this->getServer()->getMotd(),  'VPacks auto-generated resources', null, null);


        $this->resourceManager->inject($generator, $contents);
        $this->uiManager->inject($generator, $contents);


        $pack = $generator->generate();

        $manager = $this->getServer()->getResourcePackManager();
        $reflection = new ReflectionClass($manager);

        $packsProperty = $reflection->getProperty('resourcePacks');
        $packsProperty->setAccessible(true);
        $currentResourcePacks = $packsProperty->getValue($manager);

        $uuidProperty = $reflection->getProperty('uuidList');
        $uuidProperty->setAccessible(true);
        $currentUUIDPacks = $uuidProperty->getValue($manager);

        $property = $reflection->getProperty('serverForceResources');
        $property->setAccessible(true);
        $property->setValue($manager, true);

        $currentUUIDPacks[strtolower($pack->getPackId())] = $currentResourcePacks[] = $pack;

        $packsProperty->setValue($manager, $currentResourcePacks);
        $uuidProperty->setValue($manager, $currentUUIDPacks);
    }
}